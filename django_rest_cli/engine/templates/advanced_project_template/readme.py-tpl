<h1>
	{{ project_name }} REST API.
</h1>


## What is this about?
This project was generated using the ADVANCED template of the drf-cli


## This project comes bundled with:
- git initialized

- python-decouple: for managing environment varibales 
[See Package Docs Here](https://pypi.org/project/python-decouple/). 

- drf-spactacular: for auto-generating APi docs 
[See Package Docs Here](https://drf-spectacular.readthedocs.io/en/latest/readme.html). 

- dj-database-url: for connecting to various databases 
[See Package Docs Here](https://github.com/jazzband/dj-database-url). 

- pre-commit, black, isort, flake8: for code linting with pre-commit hooks 
[See this tutorial for more on working with pre-commit hooks in Python](https://ljvmiranda921.github.io/notebook/2018/06/21/precommits-using-black-and-flake8/)

- pytest-django: for writing unit tests with pytest 
[See Package Docs Here](https://pytest-django.readthedocs.io/en/latest/). 

- Docker for containerization. We are using docker to setup the postgres db for this project as well.
[check out this tutorial for guide on how to work with docker, and postgres in Django](
	https://learndjango.com/tutorials/django-docker-and-postgresql-tutorial
)

## Running the Project
- Presumably you already have a virtual env for this project. Create one if you don't.
- Run `pip install pre-commit` in your project directory.
- Run `pre-commit install` to install git hooks in your `.git` directory
- Run `docker-compose up --build` to build your docker image and start your docker container.


## Quick note on pre-commit hooks
With precommit hooks setup in this project, when you try to commit a change, 
your imports are automatically sorted with `isort`, your code formatted with `black`
and `flake8` is run on your code to catch formatting issues missed by black.
If isort, black, flake8 do not return errors, your changes will be commited.
Else you'd be shown the problematic areas of your code and prompted to fix them
before commiting again.