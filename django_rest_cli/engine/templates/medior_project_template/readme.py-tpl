<h1>
	{{ project_name }} REST API.
</h1>


## What is this about?
This project was generated using the MEDIOR template of the drf-cli


## This project comes bundled with:
- Initialized with .git

- python-decouple: for managing environment varibales 
[See Package Docs Here](https://pypi.org/project/python-decouple/). 

- drf-spactacular: for auto-generating APi docs 
[See Package Docs Here](https://drf-spectacular.readthedocs.io/en/latest/readme.html). 

- dj-database-url: for connecting to various databases 
[See Package Docs Here](https://github.com/jazzband/dj-database-url). 

- pre-commit, black, isort, flake8: for code linting with pre-commit hooks 
[See this tutorial for more on working with pre-commit hooks in Python](https://ljvmiranda921.github.io/notebook/2018/06/21/precommits-using-black-and-flake8/)


## Running the Project
- Presumably you already have a virtual env for this project. Create one if you don't.

- Run `pip install -r requirements.txt` in your project directory.

- Run `pip install -r requirements-dev.txt` in your project directory.

- Run `pre-commit install` to install git hooks in your `.git` directory

- `python manage.py runserver` to start your development server

- Point your browser to `http://localhost:8000/api/v1/docs`. You should see the auto-generated 
docs on that page


## Quick note on pre-commit hooks
With precommit hooks setup in this project, when you try to commit a change, 
your imports are automatically sorted with `isort`, your code formatted with `black`
and `flake8` is run on your code to catch formatting issues missed by black.
If isort, black, flake8 do not return errors, your changes will be commited.
Else you'd be shown the problematic areas of your code and prompted to fix them
before commiting again.